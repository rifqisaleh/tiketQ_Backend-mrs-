{
	"info": {
		"_postman_id": "a178a300-748b-42e6-a762-6b06192fc6ac",
		"name": "TiketQ Backend Documentation",
		"description": "# üéüÔ∏è TicketQ API Documentation\n\nA simple REST API for managing event tickets using Flask.\n\n---\n\n## üîó Base URL\n\n```\nhttp://localhost:5001\n\n ```\n\n---\n\n## üìÅ Endpoints\n\n### ‚úÖ Health Check\n\n**GET** `/`\n\nReturns a welcome message confirming the API is online.\n\n#### Response\n\n``` json\n{\n  \"message\": \"Welcome to TicketQ\"\n}\n---\n\n ```\n\n### ‚ûï Create a Ticket\n\n**POST** `/tickets`\n\nCreates a new ticket.\n\n#### Request Body\n\n``` json\n{\n  \"event_name\": \"Blue Day Conference\",\n  \"location\": \"Kupang\",\n  \"time\": \"2025-08-02T10:00:00\"\n}\n\n ```\n\n#### Response (201 Created)\n\n``` json\n{\n    \"created_at\": \"2025-08-01T13:07:48.849164\",\n    \"event_name\": \"Blue Day Conference\",\n    \"id\": \"275e252a-8be5-4abc-8a2b-9466fb8f908c\",\n    \"is_used\": false,\n    \"location\": \"Kupang\",\n    \"time\": \"2025-08-02T10:00:00\"\n}\n\n ```\n\n---\n\n### üìÑ Get All Tickets\n\n**GET** `/tickets`\n\nRetrieves a list of all available tickets.\n\n#### Response (200 OK)\n\n``` json\n[\n    {\n        \"created_at\": \"2025-07-30T16:26:27.368519\",\n        \"event_name\": \"Transnusa Conference\",\n        \"id\": \"968086c6-c037-49c6-8d02-336c780c06da\",\n        \"is_used\": false,\n        \"location\": \"Jakarta\",\n        \"time\": \"2025-08-02T10:00:00\"\n    },\n    {\n        \"created_at\": \"2025-08-01T12:21:22.182582\",\n        \"event_name\": \"Bruno Mars Concert\",\n        \"id\": \"275f2d2e-3f29-4d7c-92cb-fec04a77e2e8\",\n        \"is_used\": false,\n        \"location\": \"Manila\",\n        \"time\": \"2025-08-18T20:00:00\"\n    },\n    {\n        \"created_at\": \"2025-08-01T12:20:53.151942\",\n        \"event_name\": \"Williem Wilhelmus Concert\",\n        \"id\": \"82167313-464c-4706-8dae-d3c263d643ca\",\n        \"is_used\": true,\n        \"location\": \"Singapore\",\n        \"time\": \"2025-08-01T10:00:00\"\n    },\n    {\n        \"created_at\": \"2025-08-01T13:03:15.218299\",\n        \"event_name\": \"Jayanusa Conference\",\n        \"id\": \"028fe9af-1119-4a8e-8232-fa75873a047e\",\n        \"is_used\": false,\n        \"location\": \"Jakarta\",\n        \"time\": \"2025-08-02T10:00:00\"\n    },\n    {\n        \"created_at\": \"2025-08-01T13:07:48.849164\",\n        \"event_name\": \"Blue Day Conference\",\n        \"id\": \"275e252a-8be5-4abc-8a2b-9466fb8f908c\",\n        \"is_used\": false,\n        \"location\": \"Kupang\",\n        \"time\": \"2025-08-02T10:00:00\"\n    }\n]\n\n ```\n\n---\n\n### üîç Get Ticket by ID\n\n**GET** `/tickets/`\n\nRetrieves a specific ticket using its ID.\n\n#### Example\n\n```\nGET /tickets/275f2d2e-3f29-4d7c-92cb-fec04a77e2e8\n\n ```\n\n#### Response (200 OK)\n\n``` json\n[\n    {\n        \"created_at\": \"2025-08-01T12:21:22.182582\",\n        \"event_name\": \"Bruno Mars Concert\",\n        \"id\": \"275f2d2e-3f29-4d7c-92cb-fec04a77e2e8\",\n        \"is_used\": false,\n        \"location\": \"Manila\",\n        \"time\": \"2025-08-18T20:00:00\"\n    }\n]\n\n ```\n\n---\n\n### ‚úèÔ∏è Mark Ticket As Used\n\n**PATCH** `/tickets/`\n\nUpdates an existing ticket‚Äôs data.\n\n#### Request Body\n\n``` json\n#Before\n{\n  \"id\": \"uuid-generated\",\n  \"event_name\": \"Transnusa Conference\",\n  \"location\": \"Jakarta\",\n  \"time\": \"2025-08-02T10:00:00\",\n  \"is_used\": false,\n  \"created_at\": \"2025-07-30T16:23:07\"\n}\n#After\n{\n  \"id\": \"uuid-generated\",\n  \"event_name\": \"Transnusa Conference\",\n  \"location\": \"Jakarta\",\n  \"time\": \"2025-08-02T10:00:00\",\n  \"is_used\": true,\n  \"created_at\": \"2025-07-30T16:23:07\"\n}\n\n ```\n\n#### Response (200 OK)\n\n``` json\n{\n  \"message\": \"Ticket Marked successfully\"\n}\n\n ```\n\n---\n\n### ‚ùå Delete a Ticket\n\n**DELETE** `/tickets/`\n\nDeletes a specific ticket using its ID.\n\n#### Response (200 OK)\n\n``` json\n{\n  \"message\": \"Ticket deleted successfully\"\n}\n\n ```\n\n---\n\n## ‚ùó Error Response Format\n\nErrors follow this structure:\n\n``` json\n{\n  \"message\": \"Internal Server Error\"\n}\n\n ```\n\n---\n\n## üîê Authentication\n\nThis API is open and does not require authentication.\n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47257166",
		"_collection_link": "https://rifqisaleh113-727111.postman.co/workspace/Rifqi-Saleh's-Workspace~470e69f4-ec50-477f-8294-6963e5d01d87/collection/47257166-a178a300-748b-42e6-a762-6b06192fc6ac?action=share&source=collection_link&creator=47257166"
	},
	"item": [
		{
			"name": "Collections",
			"item": [
				{
					"name": "Create New Ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"event_name\": \"Jayanusa Conference\",\n  \"location\": \"Jakarta\",\n  \"time\": \"2025-08-02T10:00:00\"\n}\n"
						},
						"url": {
							"raw": "http://localhost:5001/tickets/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"tickets",
								""
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
									"disabled": true
								}
							]
						},
						"description": "Creates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html). Include a `collection` object in the request body that contains the following required properties:\n\n*   `info` ‚Äî An **object** that contains the following properties:\n    *   `name` ‚Äî A **string** value that contains the collection's name.\n    *   `schema` ‚Äî A **string** that contains a URL to the collection's schema. For example, the `https://schema.getpostman.com/collection/v1` URL.\n*   `item` ‚Äî An **object** that contains the HTTP request and response information.\n    *   `request` ‚Äî An **object** that contains the collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.\n\n**Note:**\n\n*   For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):\n    *   `info` object ‚Äî Use the `definitions.info` entry.\n    *   `item` object ‚Äî Use the `definitions.items` entry.\n*   For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
					},
					"response": []
				},
				{
					"name": "Get All Ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/tickets/<id>",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"tickets",
								"<id>"
							],
							"query": [
								{
									"key": "access_key",
									"value": "{{accessKey}}",
									"description": "Optional. A collection's read-only access key. Using this query parameter does not require an API key to call the endpoint.",
									"disabled": true
								}
							]
						},
						"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
					},
					"response": []
				},
				{
					"name": "Get Ticket by <id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/tickets/8e7a2ebc-c209-44e8-a853-bc5193c90ca0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"tickets",
								"8e7a2ebc-c209-44e8-a853-bc5193c90ca0"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspaceId}}",
									"description": "Optional. A workspace ID.",
									"disabled": true
								}
							]
						},
						"description": "Gets all of your [collections](https://www.getpostman.com/docs/collections). The response includes all of your subscribed collections."
					},
					"response": []
				},
				{
					"name": "Mark Ticket as Used by <id>",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/tickets/8e7a2ebc-c209-44e8-a853-bc5193c90ca0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"tickets",
								"8e7a2ebc-c209-44e8-a853-bc5193c90ca0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Ticket <id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/tickets/<id>",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"tickets",
								"<id>"
							]
						}
					},
					"response": []
				}
			],
			"description": "The `/collections` endpoints let you manage your [collections](https://learning.postman.com/docs/sending-requests/intro-to-collections/)."
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "X-API-Key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://farming-simulator.pstmn.io"
		}
	]
}